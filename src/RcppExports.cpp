// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// c_frab_identity
List c_frab_identity(const CharacterVector symbols, const NumericVector powers);
RcppExport SEXP _frab_c_frab_identity(SEXP symbolsSEXP, SEXP powersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector >::type symbols(symbolsSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type powers(powersSEXP);
    rcpp_result_gen = Rcpp::wrap(c_frab_identity(symbols, powers));
    return rcpp_result_gen;
END_RCPP
}
// c_frab_add
List c_frab_add(const CharacterVector symbols1, const NumericVector powers1, const CharacterVector symbols2, const NumericVector powers2);
RcppExport SEXP _frab_c_frab_add(SEXP symbols1SEXP, SEXP powers1SEXP, SEXP symbols2SEXP, SEXP powers2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector >::type symbols1(symbols1SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type powers1(powers1SEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type symbols2(symbols2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type powers2(powers2SEXP);
    rcpp_result_gen = Rcpp::wrap(c_frab_add(symbols1, powers1, symbols2, powers2));
    return rcpp_result_gen;
END_RCPP
}
// c_frab_eq
bool c_frab_eq(const CharacterVector symbols1, const NumericVector powers1, const CharacterVector symbols2, const NumericVector powers2);
RcppExport SEXP _frab_c_frab_eq(SEXP symbols1SEXP, SEXP powers1SEXP, SEXP symbols2SEXP, SEXP powers2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector >::type symbols1(symbols1SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type powers1(powers1SEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type symbols2(symbols2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type powers2(powers2SEXP);
    rcpp_result_gen = Rcpp::wrap(c_frab_eq(symbols1, powers1, symbols2, powers2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_frab_c_frab_identity", (DL_FUNC) &_frab_c_frab_identity, 2},
    {"_frab_c_frab_add", (DL_FUNC) &_frab_c_frab_add, 4},
    {"_frab_c_frab_eq", (DL_FUNC) &_frab_c_frab_eq, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_frab(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
