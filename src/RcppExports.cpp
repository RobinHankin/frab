// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// c_frab_identity
List c_frab_identity(const CharacterVector names, const NumericVector values);
RcppExport SEXP _frab_c_frab_identity(SEXP namesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(c_frab_identity(names, values));
    return rcpp_result_gen;
END_RCPP
}
// c_frab_add
List c_frab_add(const CharacterVector names1, const NumericVector values1, const CharacterVector names2, const NumericVector values2);
RcppExport SEXP _frab_c_frab_add(SEXP names1SEXP, SEXP values1SEXP, SEXP names2SEXP, SEXP values2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector >::type names1(names1SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type values1(values1SEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type names2(names2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type values2(values2SEXP);
    rcpp_result_gen = Rcpp::wrap(c_frab_add(names1, values1, names2, values2));
    return rcpp_result_gen;
END_RCPP
}
// c_frab_pmax
List c_frab_pmax(const CharacterVector names1, const NumericVector values1, const CharacterVector names2, const NumericVector values2);
RcppExport SEXP _frab_c_frab_pmax(SEXP names1SEXP, SEXP values1SEXP, SEXP names2SEXP, SEXP values2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector >::type names1(names1SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type values1(values1SEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type names2(names2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type values2(values2SEXP);
    rcpp_result_gen = Rcpp::wrap(c_frab_pmax(names1, values1, names2, values2));
    return rcpp_result_gen;
END_RCPP
}
// c_frab_eq
bool c_frab_eq(const CharacterVector names1, const NumericVector values1, const CharacterVector names2, const NumericVector values2);
RcppExport SEXP _frab_c_frab_eq(SEXP names1SEXP, SEXP values1SEXP, SEXP names2SEXP, SEXP values2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector >::type names1(names1SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type values1(values1SEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type names2(names2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type values2(values2SEXP);
    rcpp_result_gen = Rcpp::wrap(c_frab_eq(names1, values1, names2, values2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_frab_c_frab_identity", (DL_FUNC) &_frab_c_frab_identity, 2},
    {"_frab_c_frab_add", (DL_FUNC) &_frab_c_frab_add, 4},
    {"_frab_c_frab_pmax", (DL_FUNC) &_frab_c_frab_pmax, 4},
    {"_frab_c_frab_eq", (DL_FUNC) &_frab_c_frab_eq, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_frab(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
