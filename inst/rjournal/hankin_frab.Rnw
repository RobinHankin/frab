\title{Addition of R Table Objects with the \CRANpkg{frab} Package}
\author{Robin K. S. Hankin}
\maketitle
\date{2024-07-25}
\abstract{
In R, adding two objects of class \code{table} has a natural
interpretation.  However, in base R, adding two tables can give
plausible but incorrect results.  The \CRANpkg{frab} package provides
a consistent and efficient way to add \code{table} objects.  Extension
to multi-way tables is given; a discussion of prior art is presented
at the end.  The underlying mathematical structure is the Free Abelian
group, hence "\code{frab}".
}


<<echo=FALSE>>=
library("frab")
set.seed(0)
@

\section{Introduction}

Objects of class \code{table} are created by function
\code{base::table()}.  Arithmetic methods on \code{table} objects
include addition (as in ``\code{t1 + t2}''), but the interpretation of
this operation is problematic in base R.  Consider the following R
session:


<<label=tables123>>=
x <- table(c("a", "a", "b", "c", "d", "d", "a"))
y <- table(c("a", "a", "b", "d", "d", "d", "e"))
z <- table(c("a", "a", "b", "d", "d", "e", "f"))
x
@

Can we ascribe any meaning to \code{x+y} without referring to the
arguments sent to \code{table()}?  Well yes, we should simply sum the
counts of the various letters.  However:

<<label=tablesaddwrong>>=
x
y
x+y
@

The sum is defined in this case.  However, close inspection shows that
the result is clearly incorrect.  Although entries for \code{a} and
\code{b} are correct, the third and fourth entries are not as
expected: in this case R idiom simply adds the entries elementwise
with no regard to labels.  We would expect \code{x+y} to respect the
fact that we have 5 \code{d} entries, even though element \code{d} is
the fourth entry of \code{x} and the third of \code{y}.  Further:

\begin{Schunk}
\begin{Sinput}
> x
\end{Sinput}
\begin{Soutput}
a b c d 
3 1 1 2 
\end{Soutput}
\begin{Sinput}
> z
\end{Sinput}
\begin{Soutput}
a b d e f 
2 1 2 1 1 
\end{Soutput}
\begin{Sinput}
> x+z
\end{Sinput}
\begin{Soutput}
Error in x + z : non-conformable arrays
\end{Soutput}
\end{Schunk}

Above we see that \code{x} and \code{z} do not have a well-defined
sum, in the sense that \code{x+z} returns, quite reasonably, an error.

\subsection{Named vectors}


A \dfn{named vector} is a vector with a \code{names} attribute.  Each
element of a named vector is associated with a name or label.  The
names are not necessarily unique.  This makes it easier to refer to
specific values within the vector using their respective names.  Named
vectors are a convenient and useful feature of the R programming
language.  However, consider the following two named
vectors:

<<twonamedvectors>>=
u <- c(a = 1, b = 2, c = 3)
v <- c(c = 4, b = 1, a = 1)
@

Given that \code{u+v} returns a named vector, there are at least two
plausible values that it might give, viz:

<<plausible1,echo=FALSE>>=
c(a = 5, b = 3, c = 4)
c(a = 2, b = 3, c = 7)
@


In the first case the elements of \code{u} and \code{v} are added
pairwise, and the \code{names} attribute is taken from the
\emph{first} of the addends.  In the second, the names are considered
to be primary and the value of each name in the sum is the sum of the
values of that name of the addends.  Note further that there is no
good reason why the first answer could not be \code{c(c = 5, b = 3, a
  = 4)}, obtained by using the names attribute of \code{v} instead of
\code{u}.  The \CRANpkg{frab} package provides a consistent
interpretation for named vectors in which addition is indexed by name,
not position.

\section{The package in use}

The \pkg{frab} package associates a numerical value with each of a set
of arbitrary (character string) symbols.  This is accomplished using
the STL map class~\citep{josuttis1999}, a container that stores
key-value pairs and allows fast lookup and insertion based on the key.
Here we have keys as character strings and values are double-precision
numbers.

The package uses \code{S4} class, \code{frab}, for which a variety of
methods is defined.  There are several ways to create \code{frab}
objects, but the most straightforward is to coerce a named vector
using the \code{frab()} function:

<<frabzyx>>=
frab(c(z = 2, y = 7, x = 1))
@

Above, see how \code{frab()} takes a named numeric vector, possibly
reordering the names of its arguments, and returns a \code{frab} object.
Function \code{frab()} considers the names of the elements to be the
primary extraction and replacement mechanism.  If the argument has
repeated names, \code{frab()} sums them:

<<frab_show_addition>>=
frab(c(t = 3, q = 2, t = 4, q = -1, p = 6, a = 3, t = 5))
@

Above we see that the entries for \code{t} and \code{q} are summed.
Zero entries are discarded:

<<frab_show_zero_discarded>>=
frab(c(pear = 1, kiwi = 0, fig = 3, lime = 2, fig = -3))
@


Above we see that zero entries [\code{kiwi} and \code{fig}] are
discarded, irrespective of whether a zero is explicitly given, or
repeated values cancel.  However, the main motivation for using
\code{frab} objects is that they may be added:

<<howfrabaddition>>=
a <- frab(c(x = 2, y = 1, z = 3))
b <- frab(c(y = 3, x = 3, u = 1))
a+b
@

Above we see that the sum of \code{a} and \code{b} is defined in terms
of the keys of the summands, not position.  Thus, \code{a+b} has 5
($=2+3$) for its \code{x} entry and 4 ($=1+3$) for its \code{y} entry.
Observe that \code{a+b} has its entries in implementation-specific
order, as per \CRANpkg{disordR} discipline \citep{hankin2022_disordR}.
Further, note that \code{a+b} has length 4, while \code{a} and
\code{b} have length 3.


%  \section{The {frab} package and \pkg{disordR} discipline}
%  
%  The \pkg{frab} package conforms to disord discipline
%  \citep{hankin2022_disordR}.  Here I present some discussion of the
%  motivation for this design decision in the context of the
%  \pkg{frab} package; a more general discussion is given in
%  \cite{hankin2022_disordR}.  The original motivating use-case is
%  presented in \cite{hankin2022_mvp_rjournal}.  Consider the following
%  short R session:
%  
%  <<shortsession>>=
%  (a <- frab(c(x = 2, y = 1, u = 8, z = 3, v = 5)))
%  a["x"]
%  @
%  \begin{Schunk}
%  \begin{Sinput}
%  a[1]
%  \end{Sinput}
%  \begin{Soutput}
%  Error in .local(x, i, j = j, ..., drop) : disordR discipline violation
%  \end{Soutput}
%  \end{Schunk}
%  
%  Above we see a \pkg{disordR} violation: there is no such thing as
% "\code{a[1]}", for the elements of \code{a} are stored in an
% implementation-specific order.  The STL map class stores value-key
% pairs in an undefined order; thus, extracting the value for \code{x}
% is fine, but because the order is not defined it makes no sense to
% extract the "first" element (and attempting to do so results in a
% disord discipline error).
% 
% Observe that we cannot dispense with order of the values entirely,
% because sometimes one is interested in the vector of keys, or their
% values, in isolation.  If we want to work with the names or values of
% a  \code{frab} object, then the \code{disord} print methods are used:
% 
% <<frabnamesisolation>>=
% a <- frab(c(x = 2, y = 1, z = 3))
% names(a)
% values(a)
% @
% 
% Above we see that \code{names(a)} and \code{values(a)} return
% \code{disord} objects, in this case with the same hash code which
% indicates that the objects are consistent with one another in the
% sense of \code{disordR::consistent()}.  These objects may be displayed
% and subsequently manipulated, subject to disord discipline:
% 
% <<frabnamereplace>>=
% (a <- frab(c(x = 2, y = 1, z = 3)))
% names(a) <- toupper(names(a))
% a
% @
% 
% We see that replacement methods are defined, in this case the names of
% `a` become their uppercase equivalents.
% Again observe that there is no meaning to the operation "extract the
% first element of \code{names(a)}", because the elements of \code{names(a)},
% being a \code{disord} object, are stored in an implementation-specific
% order.  We may manipulate the values of a \code{frab} object, if we are
% careful to be consistent with disord discipline.  The package includes
% a number of convenient replacement idioms:
% 
% <<frabvaluemanipulate>>=
% (a <- frab(c(x = 2, y = -1, z = 3, p = -4, u = 20)))
% values(a) <- values(a)^2
% a
% @
% 
% Thus, we may square the \code{values()} of \code{a} using the replacement
% method, and object \code{a} is altered appropriately.  Further, we may use
% the \code{disindex} class of the \code{disordR} package to replace certain
% values using standard square bracket replacement idiom:
% 
% <<frabvaluemanipulate2>>=
% (a <- frab(c(x = 2, y = -1, z = 11, p = -4, u = 20)))
% a[a>10] <- 19
% a
% @
% 
% Thus, we set any value exceeding 10 to 19.

\section{Related functionality}

We note in passing that base R can indeed construct \code{x+y}: one
would reconstruct the vectors, concatenate them, and then use
\code{table()} to tabulate them:

<<userep>>=
x
y
table(c(rep(names(x),times=x),rep(names(y),times=y)))
@

However, this is inefficient (especially if entries are large), cannot
handle negative or fractional entries, and does not generalize easily
to multi-way tables.

When investigating prior art, one difficulty is the multiple
interpretations of the word ``table''.  For example, function
\code{dplyr::bind\_rows()} ~\citep{dplyr2023} might appear to offer
related functionality, but this operates on data frames such as
tibbles, not on R objects of class \code{table} in base R.  There is
no sense in which \code{bind\_rows()} adds elements of a table.  Some
\pkg{frab} functionality can be replicated using \acronym{SQL}
constructs.  Consider two simple \code{frab} objects and their sum:

<<abforSQL>>=
a <- frab(c(x = 9, y =  7, z = 7))
b <- frab(c(y = 9, x = -9, u = 9))
a+b
@ 

These objects may be added [in the sense of \pkg{frab}] using
\acronym{SQL} formalism.  First we coerce \code{a} and \code{b} to
dataframes and then combine with \code{rbind()}:

<<coerce_and_combine>>=
(ab_df <- rbind(as.data.frame(a),as.data.frame(b)))
@

Now object \code{ab\_df} contains repeated \code{key} entries.  To
frabify this, we need to use the ``group by'' \acronym{SQL} construct:

<<usegroupby>>=
library("sqldf")
aplusb <- sqldf('
SELECT key, sum(value) AS value
FROM  ab_df
GROUP BY key
')
aplusb
@

(Note that the above construction would require a little polishing for
production use as zeros are not removed automatically).  Also, further
work would be required to replicate frab funcationaity for
higher-dimensional tables, discussed below.

\section{Higher-dimensional tables}

The ideas above have a natural generalization to multi-dimensional
tables.  The relevant \code{S4} class is \code{sparsetable}, and this
has arithmetic methods implemented.  We start with three-dimensional
tables (two-dimensional \code{sparstable} objects have a print method
that coerces them to arrays before displaying, and the general case is
easier to understand).


<<<setseedthreedee,echo=FALSE>>=
set.seed(0)
@ 

<<threedeeexample>>=
abcd <- letters[1:4]
jj <- sample(abcd, 60, repl = TRUE, prob = 1/(1:4)^3)
I <- matrix(jj, 20, 3)
head(I)
nrow(I)
(x <- sparsetable(I))
@


Thus, random matrix \code{I} has has 33 rows and elements a-d.
Coercing \code{I} to \code{sparsetable} object \code{x} shows the
counts of each type of row.  Object \code{x} has 13 rows; not all
$4^3=64$ possible row types are represented.  Standard extraction and
replacement operations work as expected:

<<standardextraction>>=
x["a", "a", "a"]
x[rbind(c("b", "a", "a"), c("d", "a", "a"))]
@

Thus, extraction can operate with the arguments sent separately, or as
a matrix.  However, other more specialized extraction methods are also
provided:

<<disordextraction>>=
x[x>3]
@

Above, we extract every element greater than 3.  The package furnishes
equivalent replacement methods, but note that new entries can be added
if needed:

<<disordreplacementnew>>=
x["a", "x", "y"] <- 1000
x
@

Above we create a new entry corresponding to \code{a x y} with value
$1000$.

\subsection{Two dimensional tables}

If a \code{sparsetable} object has arity 2, it is coerced to matrix
form before printing.  Otherwise, the semantics are the same as for
any other \code{sparsetable} object.

<<twodeetable>>=
(x <- rspar2(9))
(y <- rspar2(9))
x+y
@

Above, \code{rspar()} gives a random 2D sparse table.  Package idiom
allows sparse tables to be added even if the tables are different
sizes; the resulting sum is automatically resized to accommodate both
addends.  Entries with nonzero values in both \code{x} and \code{y}
are correctly summed.

\section{Conclusions}

In base R, addition of objects of class \code{table} has a natural
interpretation.  This is implemented by the \CRANpkg{frab} package,
which gives a consistent and efficient way to add \code{table}
objects.  Extensions to higher-dimensional arrays is included.  A
range of extraction and replacement methods is provided.

\appendix
\section*{Appendix: The free abelian group}

The \dfn{free abelian group} is an interesting and useful mathematical
object \citep{cohn1984}: it is a direct sum of infinite cyclic groups.
If these cyclic groups are generated by $\left\lbrace
x_1,\ldots,x_n\right\rbrace$, then the free abelian group $F$ will be
$F=\bigoplus_{1\leqslant i\leqslant k}\left\langle x_i\right\rangle$
and elements of $F$ will be of the form $n_1x_1+\cdots+n_kx_k$ where
$n_i\in\mathbb{Z}$, $1\leqslant i\leqslant k$.  The group operation
(conventionally one uses additive notation) is then defined by
componentwise addition.  If $g=n_1x_1+\cdots+n_kx_k$ and
$h=r_1x_1+\cdots+r_kx_k$, then $-g=(-n_1)x_1+\cdots+(-n_k)x_k$ and $
h+g=(n_1+r_1)x_1+\cdots+(n_k+r_k)x_k$; the group axioms follow
immediately.  For general (non-abelian) free groups in the context of
R, the \CRANpkg{freegroup} package \citep{hankin2022_freegroup_rnews}
provides equivalent functionality.

\bibliography{hankin_frab}

\address{Robin K. S. Hankin\\
University of Stirling\\
Scotland\\
orcid: 0000-0001-5982-0415\\
\email{hankin.robin@gmail.com}
}
